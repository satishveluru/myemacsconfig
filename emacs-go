http://tleyden.github.io/blog/2014/05/27/configure-emacs-as-a-go-editor-from-scratch-part-2/

########## Notes

1. Install go
After installing, you’ll want to define the following environment variables in your ~/.bash_profile.

export GOROOT=/usr/local/go            
export GOPATH=~/Development/gocode


export PATH=$PATH:$GOROOT/bin
export PATH=$PATH:$GOPATH/bin

2.Install additional go tools (godoc, etc)
3.Install go-mode
4.Run Install go-mode
Hint : Emacs package - you can quickly import packages via C-c C-a

5.Update Emacs path to find godoc
(defun set-exec-path-from-shell-PATH ()
  (let ((path-from-shell (replace-regexp-in-string
                          "[ \t\n]*$"
                          ""
                          (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq eshell-path-env path-from-shell) ; for eshell users
    (setq exec-path (split-string path-from-shell path-separator))))

(when window-system (set-exec-path-from-shell-PATH))


(setenv "GOPATH" "/Users/tleyden/Development/gocode")

Note: you should be able to run M-x godoc and it should be able to autocomplete paths of packages.
    (of course, you may want to go get some packages first if you don’t have any)
    
6.Automatically call gofmt on save

(add-to-list 'exec-path "/Users/tleyden/Development/gocode/bin")
(add-hook 'before-save-hook 'gofmt-before-save)

7.Godef
  Godef is essential: it lets you quickly jump around the code, as you might be used to with a full featured IDE.
  
    Installing go-mode automatically installs godef bindings.
  
    To verify that godef bindings work:

    Putting the cursor over a method name
    Try doing M-x godef-jump to jump into the method, and M-* to go back.


8.Autocomplete

Install melpa auto-complete via M-x package-install followed by auto-complete
(defun auto-complete-for-go ()
  (auto-complete-mode 1))
(add-hook 'go-mode-hook 'auto-complete-for-go)

Restart emacs, and if you open a .go file the mode should be Go AC (AC == AutoComplete)

9.go-autocomplete

The basic autocomplete installed is not as “go aware” as it should be. The go-autocomplete (aka nsf/gocode) package fixes that.

Install the gocode binary

go get -u github.com/nsf/gocode

and then install the melpa package via M-x package-install followed by go-autocomplete

After installing go-autocomplete, open your ~/.emacs.d/init.el file and make sure the following was added:

(defun auto-complete-for-go ()
(auto-complete-mode 1))
 (add-hook 'go-mode-hook 'auto-complete-for-go)

If it was not added, you’ll need to add it yourself.
You’ll also need the following (as recommended in gocode issue 325):

(with-eval-after-load 'go-mode
   (require 'go-autocomplete))

Now restart emacs, and when you start typing the name of a field in a struct it will popup something that looks like this:


Customize the emacs compile command to run go build

It’s convenient to be able to run M-x compile to compile and test your Go code from within emacs.

To do that, edit your ~/.emacs.d/init.el and replace your go-mode hook with:


(defun my-go-mode-hook ()
  ; Call Gofmt before saving
  (add-hook 'before-save-hook 'gofmt-before-save)
  ; Customize compile command to run go build
  (if (not (string-match "go" compile-command))
      (set (make-local-variable 'compile-command)
           "go build -v && go test -v && go vet"))
  ; Godef jump key binding
  (local-set-key (kbd "M-.") 'godef-jump)
  (local-set-key (kbd "M-*") 'pop-tag-mark)
)
(add-hook 'go-mode-hook 'my-go-mode-hook)

After that, restart emacs, and when you type M-x compile, it should try to execute go build -v && go test -v && go vet instead of the default behavior. On some projects, you might also want to run go generate before go build

Power tip: you can jump straight to each compile error by running C-x `. Each time you do it, it will jump to the next error.





