;========================================================================================
;  This file must be named ".emacs" and live in your $HOME directory.
;========================================================================================

;---------------------------------------------------------------------
;  Locate our e-lisp...
;---------------------------------------------------------------------

(setenv "SITELISP_HOME" "~/site-lisp")
(add-to-list 'load-path (getenv "SITELISP_HOME"))

;-------------------------------------------------------
;(setenv "SITELISP_HOME" "/home/satish/.emacs.d/elpa/")
;(add-to-list 'load-path (getenv "SITELISP_HOME"))
;(add-to-list 'load-path "~/.emacs.d/elpa/")
;--------------------------------------------------------

;---------------------------------------------------------------------
; shell  Command to run Bash. Usage: M-x run-bash
;---------------------------------------------------------------------
(defun cygwin-shell ()
	"Run cygwin bash in shell mode."
      (interactive)
      (let ((explicit-shell-file-name "C:/cygwin64/bin/bash"))
	(call-interactively 'shell)))


;----------------------------------------------------------------------
; Shell colors
;----------------------------------------------------------------------
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(add-to-list 'comint-output-filter-functions 'ansi-color-process-output)

;---------------------------------------------------------------------
; Environemnt Variables
;---------------------------------------------------------------------
;; example of setting env var named “path”, by appending a new path to existing path
(setenv "PATH"
  (concat
   "C:/cygwin64/usr/local/bin" ";"
   "C:/cygwin64/usr/bin" ";"
   "C:/cygwin64/bin" ";"
   (getenv "PATH")
  ))

;-------------------------------------------------------
;  Show date and time in mode line
;-------------------------------------------------------
(setq display-time-day-and-date t)
(display-time)

;-------------------------------------------------------
;  No welcome buffer Remove Menu toool bar and scroll bar
;-------------------------------------------------------
(setq inhibit-startup-screen t)
(tool-bar-mode -1)
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(defalias 'yes-or-no-p 'y-or-n-p)

;-------------------------------------------------------
; Word Wrap
;-------------------------------------------------------
(setq word-wrap t)
(setq org-startup-indented t);Cursor Color and mouse color
(set-cursor-color     "orange")
(set-mouse-color      "#bf3eff")
(setq initial-scratch-message "")

;-------------------------------------------------------
; To move one screen to Other Using Shift arrow key command.
;-------------------------------------------------------
(windmove-default-keybindings 'shift)

;-------------------------------------------------------
; Delete Trailing whitspace ; M-SPC Just Once space ; M-\ delete Horizontal Space
;--------------------------------------------------------
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(add-hook 'before-save-lines 'delete-trailing-lines)

;-------------------------------------------------------
; Auto Completion
;-------------------------------------------------------

;-------------------------------------------------------
; Create Empty Bufffer 
;-------------------------------------------------------
(defun create-new-buffer ()
  (interactive)
  (let (($buf (generate-new-buffer "untitled")))
    (switch-to-buffer $buf)
    (funcall initial-major-mode)
    (setq buffer-offer-save t)))

(global-set-key (kbd "C-c n") #'create-new-buffer)	

;---------------------------------------------------------------------
;;Utilities
;---------------------------------------------------------------------

(set-cursor-color     "orange")
(set-mouse-color      "#bf3eff")
(setq initial-scratch-message "")

;---------------------------------------------------------------------
;; Remove whitespaces before saving file at end of each line.
;---------------------------------------------------------------------
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;---------------------------------------------------------------------
;; To move one screen to Other Using Shift arrow key command.
;---------------------------------------------------------------------
(windmove-default-keybindings 'shift)

;---------------------------------------------------------------------
;; To show Buffer list in meaningful way
;---------------------------------------------------------------------
(defalias 'list-buffers 'ibuffer-other-window)

;---------------------------------------------------------------------
;; Theme Setting.
;---------------------------------------------------------------------
(require 'solarized-dark-theme)


;---------------------------------------------------------------------
;Multiple Cursor changes
;---------------------------------------------------------------------

(global-set-key (kbd "C-c m c") 'mc/edit-lines)

;; working with multiple cursor
(require 'mc-edit-lines)
(require 'mc-cycle-cursors)
(require 'mc-mark-more)
(require 'mc-mark-pop)
(require 'rectangular-region-mode)
(require 'mc-separate-operations)
(require 'mc-hide-unmatched-lines-mode)

(provide 'multiple-cursors)

(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

;-------------------------------------------------------
; Multi Scratch
;-------------------------------------------------------
(require 'multi-scratch)

;(menu-bar-mode -1)
;(toggle-scroll-bar -1)
;(tool-bar-mode -1)

;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.

;------------------------------------------------------
; To search files or directories it will be useful
;-------------------------------------------------------
;(ido-mode t)
;(setq ido-show-dot-for-dired t)
;(setq indo-enable-flex-matching t)
;(setq ido-everywhere t)

;Note: we are using HELM instead of ido -mode

;------------------------------------------------------
;To show Buffer list in meaningful way
;------------------------------------------------------
(defalias 'list-buffers 'ibuffer-other-window)


;-------------------------------------------------------
; Proxy Setting
;-------------------------------------------------------

(setq url-proxy-services
      '(
		("www"      . "localhost:3128")
		("http"     . "localhost:3128")
		("https"    . "localhost:3128")
		))

;-------------------------------------------------------
; Package management
;-------------------------------------------------------
(require 'package)

;(setq package-archives nil)
(setq package-enable-at-startupa nil)
(add-to-list 'package-archives '("gnu"           . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa-stable"  . "https://stable.melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-milkbox" . "http://melpa.milkbox.net/packages/"))
(add-to-list 'package-archives '("marmalade"     . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("melpa"         . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("elpy" 	 . "https://jorgenschaefer.github.io/packages/"))

(package-initialize)
(package-refresh-contents) ;;; should be after pkg initialize
(add-to-list 'load-path "~/.emacs.d/elpa/")

(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-env "GOPATH"))
  
;; Bootstrap 'use-package' to install other package
(unless (package-installed-p 'use-package)
 (package-refresh-contents)
(package-install 'use-package))

;-------------------------------------------------------
;; Install Try Package
;-------------------------------------------------------
(use-package try
  :ensure t)
  
;-------------------------------------------------------
;;Install which-key Package  navigating emacs usage -CTRL-x
;-------------------------------------------------------
(use-package which-key
  :ensure t
  :config (which-key-mode))

;-------------------------------------------------------
;; Refresh Packages
;-------------------------------------------------------
(when (not package-archive-contents)
(package-refresh-contents))

;-------------------------------------------------------
;;Theme
;-------------------------------------------------------

;(require 'solarized-dark-theme)
(require 'color-theme-sanityinc-tomorrow)

;------------------------------------------------------
;Editing Enhancements & Edit with multiple cursors
;-------------------------------------------------------

(use-package multiple-cursors
  :bind
  (("C-c n" . mc/mark-next-like-this)
   ("C-c p" . mc/mark-previous-like-this)))

;------------------------------------------------------
;Fix trailing spaces but only in modified lines
;------------------------------------------------------
(use-package ws-butlerq
  :defer
  :init
  (add-hook 'prog-mode-hook #'ws-butler-mode))

(use-package shell-pop
  :init
  (setq shell-pop-full-span t)
  :bind (("C-c s" . shell-pop)))

;; (use-package magit
;;   :bind ("C-c m" . magit-status))

;; (use-package git-messenger
;;   :bind ("C-c M" . git-messenger:popup-message)
;;   :config
;;   (setq git-messenger:show-detail t
;;         git-messenger:use-magit-popup t))

;-------------------------------------------------------
;; completion
;-------------------------------------------------------

(use-package smartparens
    :ensure t
    :diminish smartparens-mode
    :config
    (add-hook 'prog-mode-hook 'smartparens-mode))
    

;-------------------------------------------------------
;Counsel and Swiper and ivy and avy
;-------------------------------------------------------
(use-package avy
  :bind
  ("C-:" . avy-goto-char-timer))

(use-package ace-link
  :config
  (ace-link-setup-default))

;-------------------------------------------------------
;Avy Single go-tochar
;-------------------------------------------------------

(use-package avy
  :ensure t
 :bind ("M-s" . avy-goto-char))

(use-package avy-flycheck
  :bind
  ("C-c '" . avy-flycheck-goto-error))

(use-package goto-chg
  :bind
  ("C-c G" . goto-last-change))


;; flx configuration fuzzy search

;; (setq ivy-re-builders-alist
;;       '((ivy-switch-buffer . ivy--regex-plus)
;;         (t . ivy--regex-fuzzy)))


;---------------------------------------------------------------------
;  Re-map some keys
;---------------------------------------------------------------------
(global-set-key "\C-C%"     'replace-regexp-region)
(global-set-key "\C-Ca"     'align-words-align)
(global-set-key "\C-Cc"     'comment-region)
(global-set-key "\C-Ce"     'eval-buffer)
(global-set-key "\C-Cf"     'fixup-whitespace)
(global-set-key "\C-Cg"     'grep-find)
(global-set-key "\C-Ci"     'indent-region)
(global-set-key "\C-Ck"     'kill-region)
(global-set-key "\C-Cl"     'linum-mode)
(global-set-key "\C-Co"     'find-file-at-point)
(global-set-key "\C-Cq"     'c-fill-paragraph)
(global-set-key "\C-Cr"     'revert-buffer)
(global-set-key "\C-Cs"     'sort-lines)
(global-set-key "\C-Cu"     'uncomment-region)
(global-set-key "\C-C="     'align-equal-signs-region)
(global-set-key "\C-Z"      'goto-line)
(global-set-key "\C-c\C-l"  'downcase-letter)
(global-set-key "\C-c\C-u"  'upcase-letter)
(global-set-key (kbd "C-<backspace>") (lambda ()
                                        (interactive)
                                        (kill-line 0)
                                        (indent-according-to-mode)))
					

;--------------------------------------------------------------------
; ivy/Counsel/Swiper - For search in buffer or file
;--------------------------------------------------------------------

;;(use-package ivy
;;      :ensure t
;;     :diminish ivy-mode
;;      :config
;;      (ivy-mode t))

;(setq ivy-initial-inputs-alist nil)

;; ;;Counsel
;;  (use-package counsel
;;     :ensure t
;;     )

;; Swiper configuration for instead of CRTL-S
;; (use-package swiper
;;           :ensure t
;;           :config
;;           (progn
;; (ivy-mode 1)
;; (setq ivy-use-virtual-buffers t)
;; (setq enable-recursive-minibuffers t)
;; ;; enable this if you want `swiper' to use it
;; ;; (setq search-default-mode #'char-fold-to-regexp)
;;      (global-set-key "\C-s" 'swiper)
;;      (global-set-key (kbd "C-c C-r") 'ivy-resume)
;;      (global-set-key (kbd "<f6>") 'ivy-resume)
;;      (global-set-key (kbd "M-x") 'counsel-M-x)
;;      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
;;      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
;;      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
;;      (global-set-key (kbd "<f1> l") 'counsel-find-library)
;;      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
;;      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
;;      (global-set-key (kbd "C-c g") 'counsel-git)
;;      (global-set-key (kbd "C-c j") 'counsel-git-grep)
;;      (global-set-key (kbd "C-c k") 'counsel-ag)
;;      (global-set-key (kbd "C-x l") 'counsel-locate)
;;      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
;;      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
;;  ))

;-------------------------------------------------------
;; Helm Set up
;-------------------------------------------------------
(require 'helm-config)

(use-package helm
  :init
  (setq helm-split-window-default-side 'other)
  (helm-mode 1)
  :config
  (define-key helm-find-files-map
    (kbd "<backtab>") #'helm-select-action)
  (define-key helm-find-files-map
    (kbd "C-i")  #'helm-execute-persistent-action)
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  :bind
  (("M-x" . helm-M-x)
   ("M-y" . helm-show-kill-ring)
   ("C-x C-f" . helm-find-files)
   ("C-c o" . helm-occur)
   ("C-x b" . helm-mini)
   ("C-x r b" . helm-bookmarks)
   ("C-h a" . helm-apropos)
   ("C-h d" . helm-info-at-point)
   ("C-c l" . helm-locate)
   ("C-c r" . helm-resume)
   ("C-c i" . helm-imenu)))

;-------------------------------------------------------
;;Like a Swaper Increment search pattern.
;-------------------------------------------------------
(use-package helm-swoop 
  :bind 
  (("C-s" . helm-swoop-without-pre-input)
   ("C-S-s" . helm-swoop)))

(use-package helm-descbinds
  :init 
  (helm-descbinds-mode))

(use-package helm-git-grep
  :bind
  (("C-c j" . helm-git-grep)
   ("C-c J" . helm-git-grep-at-point)))

(use-package helm-ls-git
  :bind
  (("C-c g" . helm-ls-git-ls)))

;; (use-package helm-make
;;   :bind
;;   (("C-c K" . helm-make)))

(use-package helm-c-yasnippet
  :bind
  (("C-c y" . helm-yas-complete)))

;; (use-package helm-mt
;;   :bind (("C-c S" . helm-mt)))


(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)

(when (executable-find "ack-grep")
  (setq helm-grep-default-command "ack-grep -Hn --color --smart-case  --no-group  %e %p %f"
        helm-grep-default-recurse-command "ack-grep -H --no-group --color  %e %p %f"))

;;(add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)

;-------------------------------------------------------
;; Convenience functions, aliases, and key bindings
;-------------------------------------------------------

;; Convenience functions and aliase

(defun am ()
  "Change dictionary to american."
  (interactive)
  (setq ispell-local-dictionary "american"))

(defun pl ()
  "Change dictionary to polish."
  (interactive)
  (setq ispell-local-dictionary "polish"))

(defalias 'st #'magit-status)
(defalias 'ir #'ispell-region)
(defalias 'md #'markdown-mode)

;-------------------------------------------------------
;; Bind keys
;-------------------------------------------------------

(global-set-key "\C-ck" #'compile)
(global-set-key "\C-cq" #'bury-buffer)


;--------------------------------------------------------------
; Go Programming Setting
;--------------------------------------------------------------

(setenv "GOPATH" "/home/satish/codebase/gocode/")
(add-to-list 'exec-path "/home/satish/codebase/gocode/bin")

(defun my-go-electric-brace ()
  "Insert an opening brace may be with the closing one.
If there is a space before the brace also adds new line with
properly indented closing brace and moves cursor to another line
inserted between the braces between the braces."
  (interactive)
  (if (not (looking-back " "))
      (insert "{")
    (insert "{")
    (newline)
    (indent-according-to-mode)
    (save-excursion
      (newline)
      (insert "}")
      (indent-according-to-mode))))

(defun my-go-mode-hook ()
          ;use goimports instead of go-fmt
          (setq gofmt-command "goimports")

          ; Call Gofmt before saving
          (add-hook 'before-save-hook 'gofmt-before-save)

          ; eldoc shows the signature of the function at point in the status bar.
          (go-eldoc-setup)

           ;Autocomplete
          (auto-complete-mode 1)

          ;; guru settings
          (go-guru-hl-identifier-mode)                    ; highlight identifiers

        ; Godef jump key binding
        (local-set-key (kbd "M-.") 'godef-jump)
        (local-set-key (kbd "M-*") 'pop-tag-mark)
        (local-set-key (kbd "M-p") 'compile)            ; Invoke compiler
        (local-set-key (kbd "M-P") 'recompile)          ; Redo most recent compile cmd
        (local-set-key (kbd "M-[") 'previous-error)     ; Go to previous error or msg
        (local-set-key (kbd "M-]") 'next-error)         ; Go to next error (or msg)
; Customize compile command to run go build
(if (not (string-match "go" compile-command))
     (set (make-local-variable 'compile-command)
          "go build -v && go test -v && go vet"))
  let ((map go-mode-map))
        (define-key map (kbd "C-c a") 'go-test-current-project) ;; current package, really
        (define-key map (kbd "C-c m") 'go-test-current-file)
        (define-key map (kbd "C-c .") 'go-test-current-test)
        (define-key map (kbd "C-c b") 'go-run)

)

(add-hook 'go-mode-hook 'my-go-mode-hook)

(require 'auto-complete-config)

(with-eval-after-load 'go-mode
   (require 'go-autocomplete))


;;C-c C-o d #for describe

------------------------------------------------------
;Guru commands
;------------------------------------------------------
;    j jump to definition
;    r referrers
;    f free names (== if a selected block is turned into a function, what params are needed?)
;    d describe expression (== show function params or type of identifier)
;    i show implements (== what interfaces does this thing implement?)
;    < show callers to a function
;   > show callees to a function
;    s show call stack (== possible paths from main())
;    p show points-to
;    e show which errors
;    c show channel peers


(require 'go-guru)
(go-guru-hl-identifier-mode)

;; Go/speedbar integration

(use-package go-mode
  :config (use-package godoctor))

;; go lint


;-------------------------------------------------------
;  Shell mode
;-------------------------------------------------------
(require 'ansi-color)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

(defun my-shell-setup ()
  (setq comint-scroll-show-maximum-output 'this)
  (setq comint-completion-addsuffix       t)
  (setq comint-eol-on-send                t)
  (setq w32-quote-process-args            ?\")

  (make-variable-buffer-local   'comint-completion-addsuffix)
  (local-set-key '[up]          'comint-previous-input)
  (local-set-key '[down]        'comint-next-input)
  (local-set-key '[(shift tab)] 'comint-next-matching-input-from-input)
)
(setq shell-mode-hook 'my-shell-setup)
(setq process-coding-system-alist (cons '("bash" . raw-text-unix)
                                        process-coding-system-alist))

;-------------------------------------------------------------------
;; Cygwin Configurations changes
;-------------------------------------------------------------------
;;(require 'setup-cygwin)
;; Sets your shell to use cygwin's bash, if Emacs finds it's running
;; under Windows and c:\cygwin exists. Assumes that C:\cygwin\bin is
;; not already in your Windows Path (it generally should not be).

;;(let* ((cygwin-root "C:/cygwin64")
;;        (cygwin-bin (concat cygwin-root "/bin")))
;;  (when (and (eq 'windows-nt system-type)
;;  	     (file-readable-p cygwin-root))

;;    (setq exec-path (cons cygwin-bin exec-path))
;;    (setenv "PATH" (concat cygwin-bin ";" (getenv "PATH")))

;; By default use the Windows HOME.
;; Otherwise, uncomment below to set a HOME
;(setenv "HOME" (concat cygwin-root "C:/home/"))

;; NT-emacs assumes a Windows shell. Change to bash.

;;(setq shell-file-name "bash")
;;(setenv "SHELL" shell-file-name)
;;(setq explicit-shell-file-name shell-file-name)
;(setq explicit-shell-file-name "C:/cygwin64/bin/bash.exe")

 ;; This removes unsightly ^M characters that would otherwise
 ;; appear in the output of java applications.
 (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)))

;-------------------------------------------------------
; Python Setting
;-------------------------------------------------------
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)

;Enable elpy Packages
(elpy-enable)

(put 'upcase-region 'disabled nil)

;------------------------------------------------------------------------
; org-mode
;------------------------------------------------------------------------

(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))


;; Table Format

;; Create a table with C-c |
;; Row Header by placing the cursor on the first row and entering C-c -.
;; Insert a line above the first (using M-S-down)
;; A column can be shifted left and right using the M-left and M-right key combinations respectively.
;;A column can be added (to the right) or deleted using the M-S-left and M-S-right key combinations respectively
;; The column currently containing the cursor can be sorted using the C-c ^ key combination



;;----------------- Search commands -------------------
;; M-x rgrep → Run Frep via find ,search all files in current directory and sub-directory.
;; M-x lgrep → Run Asynchronous , search only some files of current dir by using a text pattern (regex) on file names first.
;; M-x grep-find → use a combination of unix's grep and find commands
;; M-x find-dired -- list files in a directory with a particular property
;; M-x (In dired) dired-do-search
;; M-x zgrep -- Run Zgrep and collect ouput in grep
